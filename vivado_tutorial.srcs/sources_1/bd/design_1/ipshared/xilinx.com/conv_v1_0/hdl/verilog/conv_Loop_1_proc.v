// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_23;
wire   [3:0] coefficients_address0;
reg    coefficients_ce0;
wire   [2:0] coefficients_q0;
wire   [1:0] i_1_fu_98_p2;
reg   [1:0] i_1_reg_339;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_54;
wire   [4:0] tmp_3_fu_120_p2;
reg   [4:0] tmp_3_reg_344;
wire   [0:0] exitcond1_fu_92_p2;
wire   [1:0] j_1_fu_213_p2;
reg   [1:0] j_1_reg_352;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_69;
wire   [0:0] exitcond_fu_207_p2;
reg   [1:0] i_reg_68;
reg    ap_sig_bdd_82;
reg   [1:0] j_reg_80;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_94;
wire  signed [63:0] tmp_4_cast_fu_228_p1;
reg   [7:0] kernel_val_2_2_s_fu_20;
wire  signed [7:0] kernel_val_2_0_cast_fu_233_p1;
reg   [7:0] kernel_val_2_1_s_fu_24;
reg   [7:0] kernel_val_0_0_s_fu_28;
reg   [7:0] kernel_val_2_0_s_fu_32;
reg   [7:0] kernel_val_1_2_s_fu_36;
reg   [7:0] kernel_val_0_1_s_fu_40;
reg   [7:0] kernel_val_1_1_s_fu_44;
reg   [7:0] kernel_val_1_0_s_fu_48;
reg   [7:0] kernel_val_0_2_s_fu_52;
wire   [3:0] tmp_2_fu_108_p3;
wire   [4:0] p_shl_cast_fu_116_p1;
wire   [4:0] tmp_cast_fu_104_p1;
wire   [4:0] tmp_cast_42_fu_219_p1;
wire   [4:0] tmp_4_fu_223_p2;
reg   [3:0] ap_NS_fsm;


conv_Loop_1_proc_coefficients #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
coefficients_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( coefficients_address0 ),
    .ce0( coefficients_ce0 ),
    .q0( coefficients_q0 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_92_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_207_p2))) begin
        i_reg_68 <= i_1_reg_339;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_82)) begin
        i_reg_68 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_reg_80 <= j_1_reg_352;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_92_p2 == ap_const_lv1_0))) begin
        j_reg_80 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_339 <= i_1_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_352 <= j_1_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv2_0 == i_reg_68) & (ap_const_lv2_0 == j_reg_80))) begin
        kernel_val_0_0_s_fu_28 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv2_0 == i_reg_68) & (j_reg_80 == ap_const_lv2_1))) begin
        kernel_val_0_1_s_fu_40 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv2_0 == i_reg_68) & ~(j_reg_80 == ap_const_lv2_1) & ~(ap_const_lv2_0 == j_reg_80))) begin
        kernel_val_0_2_s_fu_52 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (i_reg_68 == ap_const_lv2_1) & (ap_const_lv2_0 == j_reg_80))) begin
        kernel_val_1_0_s_fu_48 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (i_reg_68 == ap_const_lv2_1) & (j_reg_80 == ap_const_lv2_1))) begin
        kernel_val_1_1_s_fu_44 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (i_reg_68 == ap_const_lv2_1) & ~(j_reg_80 == ap_const_lv2_1) & ~(ap_const_lv2_0 == j_reg_80))) begin
        kernel_val_1_2_s_fu_36 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(i_reg_68 == ap_const_lv2_1) & ~(ap_const_lv2_0 == i_reg_68) & (ap_const_lv2_0 == j_reg_80))) begin
        kernel_val_2_0_s_fu_32 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(i_reg_68 == ap_const_lv2_1) & ~(ap_const_lv2_0 == i_reg_68) & (j_reg_80 == ap_const_lv2_1))) begin
        kernel_val_2_1_s_fu_24 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(i_reg_68 == ap_const_lv2_1) & ~(ap_const_lv2_0 == i_reg_68) & ~(j_reg_80 == ap_const_lv2_1) & ~(ap_const_lv2_0 == j_reg_80))) begin
        kernel_val_2_2_s_fu_20 <= kernel_val_2_0_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_92_p2 == ap_const_lv1_0))) begin
        tmp_3_reg_344 <= tmp_3_fu_120_p2;
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_92_p2) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_92_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_92_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_92_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_23) begin
    if (ap_sig_bdd_23) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_54) begin
    if (ap_sig_bdd_54) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_69) begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_94) begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        coefficients_ce0 = ap_const_logic_1;
    end else begin
        coefficients_ce0 = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or exitcond1_fu_92_p2 or exitcond_fu_207_p2 or ap_sig_bdd_82) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_82) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_92_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_207_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return_0 = kernel_val_0_0_s_fu_28;

assign ap_return_1 = kernel_val_0_1_s_fu_40;

assign ap_return_2 = kernel_val_0_2_s_fu_52;

assign ap_return_3 = kernel_val_1_0_s_fu_48;

assign ap_return_4 = kernel_val_1_1_s_fu_44;

assign ap_return_5 = kernel_val_1_2_s_fu_36;

assign ap_return_6 = kernel_val_2_0_s_fu_32;

assign ap_return_7 = kernel_val_2_1_s_fu_24;

assign ap_return_8 = kernel_val_2_2_s_fu_20;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_23 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_54 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_69 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_82 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign coefficients_address0 = tmp_4_cast_fu_228_p1;

assign exitcond1_fu_92_p2 = (i_reg_68 == ap_const_lv2_3? 1'b1: 1'b0);

assign exitcond_fu_207_p2 = (j_reg_80 == ap_const_lv2_3? 1'b1: 1'b0);

assign i_1_fu_98_p2 = (i_reg_68 + ap_const_lv2_1);

assign j_1_fu_213_p2 = (j_reg_80 + ap_const_lv2_1);

assign kernel_val_2_0_cast_fu_233_p1 = $signed(coefficients_q0);

assign p_shl_cast_fu_116_p1 = tmp_2_fu_108_p3;

assign tmp_2_fu_108_p3 = {{i_reg_68}, {ap_const_lv2_0}};

assign tmp_3_fu_120_p2 = (p_shl_cast_fu_116_p1 - tmp_cast_fu_104_p1);

assign tmp_4_cast_fu_228_p1 = $signed(tmp_4_fu_223_p2);

assign tmp_4_fu_223_p2 = (tmp_3_reg_344 + tmp_cast_42_fu_219_p1);

assign tmp_cast_42_fu_219_p1 = j_reg_80;

assign tmp_cast_fu_104_p1 = i_reg_68;


endmodule //conv_Loop_1_proc

