// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_Block_proc9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_rows_V_out_din,
        src_rows_V_out_full_n,
        src_rows_V_out_write,
        src_rows_V_out1_din,
        src_rows_V_out1_full_n,
        src_rows_V_out1_write,
        src_cols_V_out_din,
        src_cols_V_out_full_n,
        src_cols_V_out_write,
        src_cols_V_out2_din,
        src_cols_V_out2_full_n,
        src_cols_V_out2_write,
        image_out,
        image_in,
        image_out_out_din,
        image_out_out_full_n,
        image_out_out_write,
        image_in_out_din,
        image_in_out_full_n,
        image_in_out_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv12_438 = 12'b10000111000;
parameter    ap_const_lv12_780 = 12'b11110000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [11:0] src_rows_V_out_din;
input   src_rows_V_out_full_n;
output   src_rows_V_out_write;
output  [11:0] src_rows_V_out1_din;
input   src_rows_V_out1_full_n;
output   src_rows_V_out1_write;
output  [11:0] src_cols_V_out_din;
input   src_cols_V_out_full_n;
output   src_cols_V_out_write;
output  [11:0] src_cols_V_out2_din;
input   src_cols_V_out2_full_n;
output   src_cols_V_out2_write;
input  [31:0] image_out;
input  [31:0] image_in;
output  [31:0] image_out_out_din;
input   image_out_out_full_n;
output   image_out_out_write;
output  [31:0] image_in_out_din;
input   image_in_out_full_n;
output   image_in_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_rows_V_out_write;
reg src_rows_V_out1_write;
reg src_cols_V_out_write;
reg src_cols_V_out2_write;
reg image_out_out_write;
reg image_in_out_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg    ap_sig_bdd_69;
reg   [0:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_20) begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
        image_in_out_write = ap_const_logic_1;
    end else begin
        image_in_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
        image_out_out_write = ap_const_logic_1;
    end else begin
        image_out_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
        src_cols_V_out2_write = ap_const_logic_1;
    end else begin
        src_cols_V_out2_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
        src_cols_V_out_write = ap_const_logic_1;
    end else begin
        src_cols_V_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
        src_rows_V_out1_write = ap_const_logic_1;
    end else begin
        src_rows_V_out1_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_69) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_69)) begin
        src_rows_V_out_write = ap_const_logic_1;
    end else begin
        src_rows_V_out_write = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_69) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_start or ap_done_reg or src_rows_V_out_full_n or src_rows_V_out1_full_n or src_cols_V_out_full_n or src_cols_V_out2_full_n or image_out_out_full_n or image_in_out_full_n) begin
    ap_sig_bdd_69 = ((image_out_out_full_n == ap_const_logic_0) | (image_in_out_full_n == ap_const_logic_0) | (src_rows_V_out_full_n == ap_const_logic_0) | (src_rows_V_out1_full_n == ap_const_logic_0) | (src_cols_V_out_full_n == ap_const_logic_0) | (src_cols_V_out2_full_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

assign image_in_out_din = image_in;

assign image_out_out_din = image_out;

assign src_cols_V_out2_din = ap_const_lv12_780;

assign src_cols_V_out_din = ap_const_lv12_780;

assign src_rows_V_out1_din = ap_const_lv12_438;

assign src_rows_V_out_din = ap_const_lv12_438;


endmodule //conv_Block_proc9

